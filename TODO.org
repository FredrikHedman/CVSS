* Reading of code (2013-10-29)
** Action plan
*** Program
   The program reads an number of key-value pairs and from these
   calculates a score based on the values read and their respective
   weight.  It also prints a vulnerability vector.
*** How to test

     In http://www.first.org/cvss/cvss-guide.html there are
     a number of examples.  That can be used to verify.

     At http://nvd.nist.gov/cvss.cfm?calculator&adv&version=2 we can
     calculate scores using a web interface and get a number of
     vectors.  

     At http://jvnrss.ise.chuo-u.ac.jp/jtg/cvss/en/CVSSv2.html there
     is another calculator.  Can be sued to compare.

*** Next step
Rewrite code to use python3.  Add tests and a command line interface
using standard python modules.  When this is done add an interactive
mode.

*** Integartion with emacs
Use pymacs or write your own elsip interactive function.

*** Alternatives

docopt, 7 Python libs.

** First reading
   No documentation and a number of global variables.  Appear to break
   the DRY-principle in several places.

   A set of global variables (acc_vec, ...) where the order seems to
   matter according to a comment.  Why?

   Three functions and a *very* long main function.  Hard to modify
   and extend.

   *is_valid_input* :  mixing all metric_value abbreviations in one big
   if.  Cute and brittle.  Adding a metric means that the function has
   to change.

   *cvss_score* : input parameter *ib* not used?  Formula unclear and
   obfuscated.

   *find_risk* : not scalable and not very pythonic.

   *main* : just too long.  Separate presenation, calculation and logic.

   *no tests* : nada, niente, rien...

